<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[unifirst的技术博客]]></title>
  <link href="http://unifirst.github.io/atom.xml" rel="self"/>
  <link href="http://unifirst.github.io/"/>
  <updated>2016-03-10T22:33:20+08:00</updated>
  <id>http://unifirst.github.io/</id>
  <author>
    <name><![CDATA[unifirst]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intellij Idea 中启动多个tomcat Server失败问题解决]]></title>
    <link href="http://unifirst.github.io/blog/2016/03/10/war-vs-war-explored/"/>
    <updated>2016-03-10T21:32:08+08:00</updated>
    <id>http://unifirst.github.io/blog/2016/03/10/war-vs-war-explored</id>
    <content type="html"><![CDATA[<p>如我在<a href="http://unifirst.github.io/blog/2016/02/29/eclipse-to-idea/">由eclipse转intellij Idea</a>中提到，由于由Eclipse刚投入Intellij的怀抱不久，对一些使用尚不熟悉，尤其这两天在Intellij中配置启动多个Tomcat出现了问题。</p>

<h3>问题描述</h3>

<p>Intellij idea中，为在本地调试两个系统之间的调用，配置两个本地tomcat server，设置不同的端口号，如8081和8082，Deploy中加入两个系统各自的Artifact xxx:war, Application context设置为“/“，即访问地址分别为<a href="http://localhost:8081/">http://localhost:8081/</a> 和 <a href="http://localhost:8082/">http://localhost:8082/</a> 。</p>

<p>问题来了，分别单独启动两个server时都能成功；但是同时启动两个系统时，两个系统都会出现问题。其中较先启动的server报错为：StandardServer.await: Invalid command &lsquo;&rsquo; received，然后会有一个系统报出异常，提示找不到xml或者properties等。</p>

<!-- more -->


<h3>寻求解决方法</h3>

<p>报出的找不到xml或properties等异常，肯定是误报，因为单独启动时是没有问题的。</p>

<p>根据StandardServer.await: Invalid command &lsquo;&rsquo; received百度或者google，得到的结果基本是端口的问题。但是我已经配置了不同的端口号，除上述的http port外，我还查看了server.xml中的shut down port、ajp port等等，均不相同。大略可以排除端口号的问题。</p>

<p>请教同事，同事解释Application context不能同为"/&ldquo;，Intellij会将web发布到tomcat目录下的ROOT中，两者必然冲突。提供了两种解决方案：</p>

<ol>
<li>Application context区别开，如"/weba/&ldquo;和&rdquo;/webb/"</li>
<li>将tomcat安装目录复制一份，用两套tomcat部署</li>
</ol>


<p>我恍然同时，又觉得Eclipse完全可以实现啊，Intellij这都实现不了是不是有点low了。</p>

<h3>问题解决</h3>

<p>最终的最终，我发现了问题所在。在Deploy中加入的Artifact不应该是war，而应该选择第二种war explored！</p>

<p>搜索了war和war explored的区别。网上大都在讨论两者最大的区别是explored支持热加载，方便本地修改调试。但是针对本文的问题，没有找到直接解释。</p>

<p>自己浅析一下：war理所当然会打为war包，发布时候脱离了你本地项目目录，发布到了Tomcat目录\webapps\ROOT下；explored方式，是将web root指向了你的本地项目。因此war形式会产生冲突，而explored方式不会，且explored方式可以热加载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由eclipse转intellij Idea]]></title>
    <link href="http://unifirst.github.io/blog/2016/02/29/eclipse-to-idea/"/>
    <updated>2016-02-29T17:34:20+08:00</updated>
    <id>http://unifirst.github.io/blog/2016/02/29/eclipse-to-idea</id>
    <content type="html"><![CDATA[<h3>设置字符集utf8</h3>

<p>依次打开 File | Settings | Editor | File Encodings，将IDE Encoding、Project encoding 、default encoding for properties, 均选择utf8</p>

<h3>设置unix换行符</h3>

<p>依次打开 File | Settings | Editor | Code Style，将Line separator (for new  files) 选择 Unix and OS X(\n)</p>

<p>同时可以设置行宽：Right margin (columns): 120</p>

<h3>快捷键设置</h3>

<p>关于idea的快捷键，一搜一堆，不多说。</p>

<p>主要的对应关系：（eclipse ——   intellij）</p>

<pre><code>ctrl+shift+R —— ctrl+shift+n
ctrl+shift+T —— ctrl+n
alt+← —— ctrl+alt+←
F3（ctrl+left button） —— ctrl+B（ctrl+left button）
Ctrl+D —— Ctrl+Y
Alt+Shift+Up/Down —— Ctrl+D
Ctrl+Shift+F —— Ctrl+Alt+L
Ctrl+Shift+O —— Ctrl+Alt+O
……
</code></pre>

<p>在File | Settings | Keymap 中，可以选择eclipse、vs等风格的快捷键</p>

<!-- more -->


<h3>设置主题、字体</h3>

<p>在File | Settings | Appearance &amp; Behavior | Appearance 设置界面窗口的主题、字体大小</p>

<p>在 File | Settings | Editor | Colors &amp; Fonts | Font 设置编辑区的主题、字体大小。需要注意，原主题无法修改，需要save as建立自己的主题，然后才允许修改</p>

<h3>console / terminal</h3>

<p>这是intellij中很棒的功能。alt+ F12即可打开，可以执行系统的命令。如git、mvn、java等。</p>

<h3>git使用</h3>

<p>eclipse中是在右键team中进行git的操作。intellij中，也可右键选择git对文件进行git操作，如revert（类似于eclipse中的overwrite）等。</p>

<p>intellij中，最爽的就是可以直接打开console执行git命令了。当然也可以通过git bash单独打开。在console中，试着多用git的命令吧。</p>

<h3>maven使用</h3>

<p>公司的项目，一般都是在maven安装目录中，单独设置了setting.xml。刚刚open一个公司的项目时，总会一堆编译错误。其实不外乎两步解决：</p>

<ol>
<li>依次打开 File | Settings | Build, Execution, Deployment | Build Tools | Maven, 将Maven home directory设置为maven的安装目录，以便使用之前已弄好的setting.xml</li>
<li>选择project或者pom.xml，右键maven中选择Reimport，一般就OK啦</li>
</ol>


<p>其它的maven操作暂未用到，若需要，mvn命令想来也很方便。</p>

<h3>tomcat server</h3>

<p>依次打开Run | Edit configurations, 点击“+”号，在列表中选择Tomcat server -> local, Server标签下起好Name、配好port，Deployment标签下“+”入artifacts就完成了。</p>

<p>上述添加完后，就可以run或者debug了。</p>

<h3>导入Eclipse的代码格式化文件</h3>

<p>插件Eclipse Code Formatter可以完成这个任务。</p>

<p>File | Settings | Plugins中搜索Eclipse Code Formatter，然后install。然后就可以看到File | Settings | Other Settings | Eclipse Code Formatter了，里面选择Use the eclipse code formatter, 然后在Eclipse Java Formatter config file中选择自己的formatter xml文件就完成了。</p>

<p>在文件中，Ctrl+alt+L就可以format代码了。</p>

<p>其实eclipse还有个文件，就是code template，定义comment格式的。这个暂时还未找到导入方案……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Count(*)，count(1)和count(field)区别]]></title>
    <link href="http://unifirst.github.io/blog/2016/02/16/count-star/"/>
    <updated>2016-02-16T17:39:14+08:00</updated>
    <id>http://unifirst.github.io/blog/2016/02/16/count-star</id>
    <content type="html"><![CDATA[<p>印象中，count(key)比count(*)效率要高，因此在项目中用了count(field)的形式来统计行数。在code reivew时被指出应用count(*)，于是查了下，并做了下简单测试，果然是我记错了，足见code review是多么有用啊。</p>

<h3>count(*)</h3>

<p>count(*)是对不为null的行进行计数，因此某一行只要不是所有列都为null（即只要是存在的记录），就会被计数。</p>

<p>mysql用explain查看其执行计划，count(*)会尽量利用具有以下特征的索引来提高性能：</p>

<ol>
<li>not null列</li>
<li>字段较窄</li>
</ol>


<p><img src="http://img.blog.csdn.net/20160216181909126" alt="explain查看count(*)执行计划" />
如图所示，表主键id为bigint类型，count(*)时自动选择了int类型的gst_id索引。</p>

<h3>count(field)</h3>

<p>count(field)是对field列不为null的行进行统计，因此某一行的该列为null，则不予计数 。</p>

<p>同样用explain查看其执行计划，count(field)同样会尽量利用索引来提高性能，暂时发现有以下两种情况：</p>

<!-- more -->


<ol>
<li>含有该field的索引</li>
<li>若改field为主键，则同count(*)一样，会选择更窄的索引，此时和使用count(*)无异</li>
</ol>


<p>由此可见，用count(field)来进行统计会有以下问题：</p>

<ol>
<li>若该field有null记录，意图用来统计所有记录时，结果是错误的</li>
<li>若该field没有索引或者不是最优索引，则效率会低</li>
</ol>


<h3>count(1)</h3>

<p>还见到count(1)用法。mysql中验证没有发现与count(*)明显区别，暂且认为是一样的。</p>

<h3>小结</h3>

<p>count(*)和count(1)无太大差别，count(field)若使用不当会带来错误或性能问题，不建议使用。</p>

<p>另外，若含有where语句，则会优先where中条件索引，上面讨论的执行计划，应该没多大意义了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring中原型prototype的准确使用]]></title>
    <link href="http://unifirst.github.io/blog/2016/02/04/prototype-in-spring/"/>
    <updated>2016-02-04T16:55:01+08:00</updated>
    <id>http://unifirst.github.io/blog/2016/02/04/prototype-in-spring</id>
    <content type="html"><![CDATA[<h2>实际问题</h2>

<p>项目中，报表导出涉及到了在同一个类的两个不同方法中，都有相同的查询数据库的操作，一个方法是用于获取内容，一个是用于获取条数的，大概类似于这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyReportExporter</span> <span class="kd">extends</span> <span class="n">AbstractReportExporter</span><span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">DataResp</span> <span class="nf">getData</span><span class="o">(</span><span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span> <span class="n">records</span> <span class="o">=</span> <span class="n">myService</span><span class="o">.</span><span class="na">queryList</span><span class="o">(</span><span class="n">param</span><span class="o">);</span><span class="c1">//查询db</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">wrapResp</span><span class="o">(</span><span class="n">records</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">(</span><span class="n">Param</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">myService</span><span class="o">.</span><span class="na">queryList</span><span class="o">(</span><span class="n">param</span><span class="o">).</span><span class="na">size</span><span class="o">();</span><span class="c1">//查询db</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于是继承的父类统一处理，因此没办法单独优化这个步骤。在父类的统一处理过程中，会多次调用getCount方法，这样每处理一次，就需要多次查询数据库。</p>

<p>这是会想到，可以用私有全局变量将查询结果存起来。</p>

<!-- more -->


<h2>使用原型</h2>

<p>在Spring中，@Service默认都是单例的。用了私有全局变量，若不想影响下次请求，就需要用到原型模式，即@Scope(&ldquo;prototype&rdquo;)</p>

<p>所谓单例，就是Spring的IOC机制只创建该类的一个实例，每次请求，都会用这同一个实例进行处理，因此若存在全局变量，本次请求的值肯定会影响下一次请求时该变量的值。
原型模式，指的是每次调用时，会重新创建该类的一个实例，比较类似于我们自己自己new的对象实例。</p>

<p>通过查看@Scope我们可以看到，默认的模式：singleton</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Scope</span> <span class="o">{</span>
</span><span class='line'><span class="n">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="n">ConfigurableBeanFactory</span><span class="o">.</span><span class="na">SCOPE_SINGLETON</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过如下方式，可以将该类设置为原型模式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="nd">@Scope</span><span class="o">(</span><span class="s">&quot;prototype&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyReportExporterextends</span> <span class="n">AbstractReportExporter</span><span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>prototype陷阱</h2>

<p>在进行以上改动后，运行发现并没有生效，依然是一个实例。这说明只加一个@Scope注解还不够。</p>

<p>在调用改service的controller层，是这样注入的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Autowired</span>
</span><span class='line'><span class="kd">private</span> <span class="n">MyReportExporter</span> <span class="n">myReportExporter</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而controller同样是默认单例的，因此只实例化了一个controller对象，在其中依赖注入的MyReportExporter对象也就只会实例化一次。</p>

<p>在不想改变controller单例模式的情况下，可以如下修改：
放弃使用@Autowired方式，改用getBean方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'><span class="n">MyReportExporter</span> <span class="n">myReportExporter</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">MyReportExporter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以自己写个Spring工厂类，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.BeansException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContextAware</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.quhuhu.cesar.common.utils.LogUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBeanFactory</span> <span class="kd">implements</span> <span class="n">ApplicationContextAware</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setApplicationContext</span><span class="o">(</span><span class="n">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">BeansException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">applicationContext</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取某个Bean的对象</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LogUtils</span><span class="o">.</span><span class="na">errorMail</span><span class="o">(</span><span class="s">&quot;Spring getBean:&quot;</span> <span class="o">+</span> <span class="n">clazz</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，通过如下方式调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SpringBeanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">MyReportExporter</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">doSth</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改后，运行OK，达到自己想要的结果。</p>

<h2>小结</h2>

<p>Spring中依赖注入的默认对象为单例形式，@Scope(“prototype”)注解可以将其改变为原型模式。</p>

<p>改变底层（如service层）的对象为原型时，同时改变上层调用层（如controller层）的调用方式，原型模式才会生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客建立之路]]></title>
    <link href="http://unifirst.github.io/blog/2016/02/04/first-blog/"/>
    <updated>2016-02-04T12:17:12+08:00</updated>
    <id>http://unifirst.github.io/blog/2016/02/04/first-blog</id>
    <content type="html"><![CDATA[<h2>blog历程</h2>

<h3>托管博客</h3>

<p>我先后用过<a href="http://blog.sina.com.cn/heiflow">新浪博客</a>、<a href="http://blog.csdn.net/unifirst">CSDN博客</a>、<a href="http://zhendexiangxxzhegeblogziyuming.blogbus.com/">博客大巴</a>还有其它一些不知名的小blog，当然还有QQ空间、校内等。每次想记些东西的时候，总是纠结于要记录在哪。久而久之，貌似处处都有blog，然而又处处不长久。</p>

<p>印象尤为深刻的，是以前选了一个很冷门的blog网站，自己偏安一隅地写着blog，结果有一天被通知网站要关闭了，之后export出来，我还用windows自带的加密给文件加了下密，还没来得及处理，后来的一次重装系统，再也无法解密了。</p>

<h3>自建blog</h3>

<p>有追求的人都自己搭建blog，看网上很多wordpress的教程，也搞过。当时穷学生一个，舍不得花钱买空间、买域名，找免费的空间和域名（比如tk），到时也出来过博客首页，到最后都不了了之。</p>

<h3>github</h3>

<p>毕业后进了国企，就再也没想过这档子事。两年后出来，感觉仿佛变了天，git？没用过啊。面试，还要最好有git的项目？瞬间感觉被落下好几个世纪。</p>

<p>好在终于进了个不大不小的互联网公司，开始兢兢业业地向大家学习。也终于逐渐知道了github是怎么回事，而且竟然了解了通过git可以搭建blog，这让我跃跃欲试。</p>

<!-- more -->


<h2>github中博客的搭建</h2>

<p>各种教程网上遍布，我也就不班门弄斧了。甚至看到了关于大家传播github搭建blog是否会导致github走向sourceforge命运的讨论。作为旁观者我就是看看，我不说话。</p>

<p>首先是唐巧的两篇文章给了我很大启示<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">《象写程序一样写博客：搭建基于github的博客》</a>和<a href="http://blog.devtang.com/blog/2014/01/08/why-we-need-write/">《作为码农，我们为什么要写作》</a>给了我很大启示和帮助。我虽然年近30但事业上一事无成，但看过一篇鸡汤文章<a href="http://toutiao.com/a6240890766765506818/">《我说来不及，你就不学了吗</a>》，告诉我任何时候开始都不算晚。</p>

<p>在这春节前的最后一两个工作日，也终于算是稍有空闲。准备上手搭建这个blog。</p>

<h3>github</h3>

<p>git的作用想必大家都了解，很强大的版本管理工具，其依托的github上可以实现项目的管理及分享，是码农们的圣殿。</p>

<p>用github搭建blog，其实是用了其提供出来的个人page或者project的page，本意是用于界面化展示个人（或组织）信息或者项目信息的，由于其灵活的可管理定制能力，被大家钻空式地用在了blog上。</p>

<h3>octopress</h3>

<p>只用github，就完全可以搭建blog了。但所有工作都自己来完成，总是有些许不便，也总有些极客极富兴趣地让一些事情变得简单，于是出现了类似于<a href="http://octopress.org/">octopress</a>的工具。</p>

<p>我搭建blog所有的过程，均效仿自octopress官网中的<a href="http://octopress.org/docs/setup/">Octopress Setup</a>及<a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a> 的部分。唐巧<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">《象写程序一样写博客：搭建基于github的博客》</a>中似有不全。</p>

<h3>GitCafe</h3>

<p>github搭建的blog在国内访问，速度的确令人拙计，唐巧的另一篇博客<a href="http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/">《将博客从GitHub迁移到GitCafe》</a>提供了一种全新的思路。“我强烈建议各位基于 Github Pages 功能来搭建个人博客的朋友，将博客内容镜像到 GitCafe 上”，让我知道我的博客以后的发展方向，目前想来没什么值得大家关注的内容，期待有足够大访问量让我后续有不断改进的动力。</p>

<h3>Markdown</h3>

<p>估计不得不提的就是这个Markdown。百度百科:“Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。”</p>

<p>我初次见到Markdown是在发布CSDN的blog时，这篇blog也正是用CSDN的来编写的。
看网上推荐，windows下最好用的是编辑软件是<a href="http://www.markdownpad.com/download.html">markdownpad2</a>，已下载，还未安装试用。</p>

<h2>小结</h2>

<p>总之，我的github的blog启动了。希望能通过它，让我不断积累，不断进步。</p>

<p>以后，会陆续加Comments（如Disqus）、文章列表、Catagories等功能，若有需要，会加入Google Analytics及迁移GitCafe等。</p>

<p>如今最重要的，是先用起来。</p>
]]></content>
  </entry>
  
</feed>
